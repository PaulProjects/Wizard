---
import { Icon } from "astro-icon";
import Layout from "../layouts/Layout.astro";
import Input from "../components/Input.astro";
import Score from "../components/Score.astro";
import Rule from "../components/Rule.astro";
import Alert from "../components/Alert.astro";
---

<Layout title="Wizzard!">
  <!--
  <div class="prose prose-sm md:prose-base w-full flex-grow pt-2">
    <h1 class="text-center text-6xl" id="title">Wizzard</h1>
  </div>
 -->
  <div class="hidden" id="input"><Input /></div>
  <div class="" id="score"><Score /></div>
  <nav
    id="nav_container"
    class="boxbuttons self-center w-4/5 lg:w-2/3 fixed bottom-5 inset-x-0 mx-auto join flex justify-center items-center"
  >
    <button class="btn btn-secondary join-item nav_graph" id="chart_nav"
      ><div id="chart_nav_icon" class="w-6">
        <Icon name="mdi:chart-box" />
      </div></button
    >
    <button class="btn btn-secondary w-4/5 join-item" id="nav_button"
      ><p id="navtext">Loading...</p></button
    >
    <button class="btn btn-secondary join-item nav_graph" id="chart_nav_right"
      ><div class="w-6"></div></button
    >
  </nav>
  <!-- Settings modal -->
  <dialog id="modal_settings" class="modal modal-top sm:modal-middle">
    <form method="dialog" class="modal-box">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >✕</button
      >
      <div class="flex flex-col justify-center items-center">
        <h2 class="font-bold text-3xl mt-5">Settings</h2>
        <div>
          <button
            class="btn btn-secondary btn-block mt-2"
            id="questionbutton"
            onclick="
          modal_info.showModal();
          ">Help</button
          >
          <button
            class="btn btn-secondary btn-block mt-5"
            id="questionbutton"
            onclick="
            modal_rules.showModal();">Edit Rules</button
          >
          <button class="btn btn-secondary btn-block mt-2" id="editdealer"
            >Edit Dealer</button
          >
          <button class="btn btn-secondary btn-block mt-2" id="editscore">
            Edit Scores
          </button>
          <button
            class="btn btn-info btn-block mt-5"
            onclick="location.href = '/';"
            id="savequit"
          >
            Save and Quit
          </button>
          <button class="btn btn-primary btn-block mt-2" id="endgame">
            Finish Game
          </button>
          <button
            class="btn btn-secondary btn-block mt-5 hidden"
            id="continuegame"
          >
            Continue Game
          </button>
        </div>
      </div>
    </form>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>
  <!-- End of Settings modal -->
  <!-- Rules Modal -->
  <dialog id="modal_rules" class="modal modal-top sm:modal-middle">
    <form method="dialog" class="modal-box">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >✕</button
      >
      <div class="flex flex-col justify-center items-center">
        <h2 class="font-bold text-3xl mt-5">Rules</h2>

        <div id="rules">
          <Rule
            title="±1 Rule"
            description="Requires the amount of possible bids to differ from the total amount of tricks"
            js_id="rule_1"
          />
        </div>
        <button class="btn btn-info btn-block mt-2"> Ok</button>
      </div>
    </form>
  </dialog>
  <!-- End of Rules modal -->
  <!-- Really End game? modal -->
  <dialog id="modal_confirmend" class="modal modal-top sm:modal-middle">
    <form method="dialog" class="modal-box">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >✕</button
      >
      <div class="flex flex-col justify-center items-center">
        <h2 class="text-2xl mt-5">
          Do you really want to finish the game? This ends this game.
          <br /><br />You can continue it by clicking on the settings and then
          on continue.
        </h2>
        <div>
          <!-- Cancel Game Button that navigates to / -->
          <button class="btn btn-primary btn-block mt-5" id="rendgame">
            Finish Game
          </button>
          <button class="btn btn-info btn-block mt-2"> Cancel</button>
        </div>
      </div>
    </form>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>
  <!-- End of Settings modal -->
  <!-- Edit Modal -->
  <dialog id="modal_edit" class="modal modal-top sm:modal-middle">
    <form method="dialog" class="modal-box">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >✕</button
      >
      <div class="flex flex-col justify-center items-center">
        <h2 class="font-bold text-3xl mt-5">Edit Game</h2>
        <div>
          <input
            type="text"
            class="input input-bordered w-full"
            placeholder="Game Name"
            id="edit_name"
          />
          <!-- Cancel Game Button that navigates to / -->
          <button class="btn btn-info btn-block mt-2" id="edit_save">
            Save</button
          >
          <button class="btn btn-info btn-block mt-2"> Cancel</button>
        </div>
      </div>
    </form>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>
  <!-- Warning Modal -->
  <!-- Edit Modal -->
  <dialog id="modal_attention" class="modal modal-top sm:modal-middle">
    <form method="dialog" class="modal-box">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >✕</button
      >
      <div class="flex flex-col justify-center items-center">
        <h2 class="font-bold text-3xl mt-5">Info</h2>
        <span id="info_text"></span>
        <button class="btn btn-info btn-block mt-5">OK</button>
      </div>
    </form>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>
  <!-- Select Dealer Modal -->
  <dialog id="modal_dealer" class="modal modal-top sm:modal-middle">
    <form method="dialog" class="modal-box">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
        >✕</button
      >
      <div class="flex flex-col justify-center items-center">
        <h2 class="font-bold text-3xl mt-5">Select Dealer</h2>
        <label class="form-control w-full max-w-xs">
          <div class="label">
            <span class="label-text">Pick the new dealer</span>
          </div>
          <select class="select select-bordered" id="select_dealer"> </select>
        </label>
        <button class="btn btn-info btn-block mt-2" id="select_dealer_save"
          >Save</button
        >
      </div>
    </form>
    <form method="dialog" class="modal-backdrop">
      <button>close</button>
    </form>
  </dialog>
</Layout>

<style>
  .confetti {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
    user-select: none;
  }
  :root {
    --padding-card: 10px;
  }
</style>

<style is:global>
  .range_number {
    display: inline-block;
    margin: 0 auto;
    width: 10px; /* adjust this value as needed */
    text-align: center;
  }
  
  /* select first range_number */
  .range_number:first-child {
    margin-left: 0;
  }
  
  /* select last range_number */
  .range_number:last-child {
    margin-right: 0;
  }

  .range_number_small_font {
    font-size: 0.7em;
  }

  .range_number_highlighted {
    display: inline-block;
    margin: 0 auto;
    width: 20px; /* adjust this value as needed */
    text-align: center;
    background-color: #76c4ee;
    border-radius: 10px;
    color: black;
    /* move the border up one pixel*/
    margin-bottom: 2px;
  }
  
  .range_number_highlighted:first-child {
    margin-left: 0;
  }
  
  .range_number_highlighted:last-child {
    margin-right: 0;
  }
</style>

<script is:inline src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script
  is:inline
  src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"
></script>
<script is:inline src="../scripts/score.js"></script>
<script
  is:inline
  src="https://code.jquery.com/jquery-3.7.0.min.js"
  integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
  crossorigin="anonymous"></script>
<script>
  //if localstorage game_active is not true then redirect home
  if (localStorage.getItem("game") == null) {
    window.location.href = "/";
  }

  //get the game json from localstorage
  let game = "";
  try {
    game = JSON.parse(localStorage.getItem("game"));
  } catch (error) {
    window.location.href = "/";
  }
  //get the players array from localstorage
  const players = JSON.parse(game.players);

  window.editmode = false;

  let input_block_reload = false;

  function navblue() {
    $("#chart_nav").removeClass("btn-primary").addClass("btn-secondary");
    $("#nav_button").removeClass("btn-primary").addClass("btn-secondary");
    $("#chart_nav_right").removeClass("btn-primary").addClass("btn-secondary");
  }

  function navred() {
    $("#chart_nav").removeClass("btn-secondary").addClass("btn-primary");
    $("#nav_button").removeClass("btn-secondary").addClass("btn-primary");
    $("#chart_nav_right").removeClass("btn-secondary").addClass("btn-primary");
  }

  //listen for click on all divs with the class optionbox
  $(".optionbox").on("click", function () {
    //check if the user clicked on the checkbox itself
    if ($(event.target).is("input[type='checkbox']")) {
      return;
    }
    //get the checkbox inside the div
    var checkbox = $(this).find("input[type='checkbox']");
    //trigger a click on the checkbox
    checkbox.trigger("click");
  });

  function showgraphicon() {
    $("#chart_nav_icon").removeClass("hidden");
    $("#nav_button").addClass("join-item");
    $(".nav_graph").removeClass("hidden");
  }

  function hidegraphicon() {
    $("#chart_nav_icon").addClass("hidden");
    $("#nav_button").removeClass("join-item");
    $(".nav_graph").addClass("hidden");
  }

  function update() {
    if (game.display == "1") {
      //add class="hidden" to input and remove it from score
      document.getElementById("input").classList.add("hidden");
      document.getElementById("score").classList.remove("hidden");
      hidegraphicon();

      //read game.round and place it in the text with id round
      document.getElementById("s_round").innerHTML =
        `${game.round}/${game.max_rounds}`;

      $("#names").append("<th>Round</th>");

      if (game.step == "1") {
        $("#navtext").text("Place Bets");
      } else if (game.step == "2") {
        $("#navtext").text("Enter Tricks");
      }

      if (game.step == "3") {
        navblue();
        score_switch_view("4", game);
        $("#icon_celeb").removeClass("hidden");
        $("#endgame").addClass("hidden");
        $("#savequit").addClass("hidden");
        $("#continuegame").removeClass("hidden");
        $("#rules").addClass("hidden");
      } else {
        score_switch_view(game.score_display, game);
        $("#icon_celeb").addClass("hidden");
      }

      updatescore(players, game);
    } else if (game.display == "2") {
      //add class="hidden" to score and remove it from input
      document.getElementById("score").classList.add("hidden");
      document.getElementById("input").classList.remove("hidden");
      showgraphicon();
      updateInput();
    }
  }
  //add a listener to the nav_button
  $("#nav_button").on("click", () => {
    freezebutton();
    if (editmode == true) {
      //reload page
      location.reload();
    } else if (game.step == "3") {
      finish_game();
      return;
    } else if (game.display == "1") {
      game.display = "2";
      localStorage.setItem("game", JSON.stringify(game));
      update();
    } else {
      Input_confirm();
    }
  });

  $("#chart_nav").on("click", () => {
    navblue();
    input_block_reload = true;
    freezebutton();
    if (game.display == "2") {
      game.display = "1";
      localStorage.setItem("game", JSON.stringify(game));
      update();
    }
  });

  function finish_game() {
    //get recent_games from localstorage and if it doesnt exist create an empty array
    let recent_games = JSON.parse(localStorage.getItem("recent_games"));
    if (recent_games === null) {
      recent_games = [];
    }
    //push the game to recent_games
    let gamestored = JSON.parse(JSON.stringify(game));
    //remove display, step and score_display
    delete gamestored.display;
    delete gamestored.step;
    delete gamestored.score_display;
    //put a time_ended timestamp
    gamestored.time_ended = Date.now();
    recent_games.push(gamestored);
    //delete game from localstorage
    localStorage.removeItem("game");
    //set recent_games in localstorage
    localStorage.setItem("recent_games", JSON.stringify(recent_games));
    location.href = "/";
  }

  function freezebutton() {
    //disable nav_button for 1.5 seconds
    $("#nav_button").addClass("btn-disabled");
    $(".nav_graph").addClass("btn-disabled");
    setTimeout(function () {
      $("#nav_button").removeClass("btn-disabled");
      $(".nav_graph").removeClass("btn-disabled");
    }, 500);
  }

  //Switch to graph
  $("#icon_chart").on("click", () => {
    score_switch_view("1", game);
  });
  $("#icon_table").on("click", () => {
    score_switch_view("2", game);
  });
  $("#icon_top").on("click", () => {
    score_switch_view("3", game);
  });
  $("#icon_celeb").on("click", () => {
    score_switch_view("4", game);
  });
  $("#icon_bar").on("click", () => {
    score_switch_view("5", game);
  });
  $("#icon_analytics").on("click", () => {
    score_switch_view("6", game);
  });

  //Input
  let valid = true;

  //an array to store the scores
  let data = [];

  //helper methods
  function updatetotal() {
    if (game.step == "1") {
      $("#total").html(`Total: ${data.reduce((a, b) => +a + +b, 0)}`);
      if (game.round !== 1 && game.rule_1 == true) {
        if (data.reduce((a, b) => +a + +b, 0) === game.round) {
          valid = false;
          navred();
        } else {
          valid = true;
          navblue();
        }
      } else {
        valid = true;
        navblue();
      }
    } else {
      $("#total").html(
        `Total: ${data.reduce((a, b) => +a + +b, 0)}/${game.round}`,
      );
      if (data.reduce((a, b) => +a + +b, 0) === game.round) {
        valid = true;
        navblue();
      } else {
        if (game.rule_expansion == false) {
          valid = false;
          navred();
        }
      }
    }
  }

  function scorecalc(bet, trick) {
    if (bet == trick) {
      return 20 + parseFloat(bet) * 10;
    } else {
      return Math.abs(bet - trick) * -10;
    }
  }

  function addplayertoInput(index, max) {
    let player = players[index];
    console.log(player);
    $("#players").append(
      `<div class="card w-full lg:w-2/3 bg-base-100 shadow-xl">
            <div class="card-body">
                <h2 class="card-title text-2xl">${player}</h2>
                <input type="range" min="0" max="${max}" value="0" class="range" step="1" aria-label="Input" id="input_range_${index}"/>
                <div class="w-full flex justify-between text-xl range-lg insets pl-1 pr-1" id="input_insets_${index}">
                </div>
            </div>
        </div>
    </div>`,
    );

    $(`#input_range_${index}`).on("input", function () {
      data[index] = $(this).val();
      //update the total
      updatetotal();
      //underline the inset that matches the value
      $(`#input_insets_${index} span`).removeClass("underline");
      $(`#input_insets_${index} span:eq(${data[index]})`).addClass("underline");
    });

    //add insets as max
    for (let i = 0; i <= max; i++) {
      if (game.step == "2") {
        //if i is equal to the bet hightlight it
        if (i == JSON.parse(game.bets)[game.round - 1][index]) {
          $(`#input_insets_${index}`).append(
            `<span class="range_number_highlighted">${i}</span>`,
          );
        } else {
          $(`#input_insets_${index}`).append(
            `<span class="range_number">${i}</span>`,
          );
        }
      } else {
        $(`#input_insets_${index}`).append(
          `<span class="range_number">${i}</span>`,
        );
      }
    }

    //if the round is over 10 then make the font smaller
    if (max > 10) {
      $(".range_number").addClass("range_number_small_font");
      $(".range_number_highlighted").addClass("range_number_small_font");
    }

    //add listener to the insets to update the range setting it to the value
    $(`#input_insets_${index} span`).on("click", function () {
      $(`#input_range_${index}`).val($(this).html());
      data[index] = $(this).html();
      //update the total
      updatetotal();
      //underline the inset that matches the value
      $(`#input_insets_${index} span`).removeClass("underline");
      $(`#input_insets_${index} span:eq(${data[index]})`).addClass("underline");
    });
  }

  function updateInput() {
    if (input_block_reload) {
      input_block_reload = false;
      updatetotal();
      return;
    }
    $("#players").empty();

    $("#navtext").text("Confirm");

    if (game.step === "1") {
      document.getElementById("round").innerHTML =
        `${game.round}/${game.max_rounds} - Place Bets`;
    } else {
      document.getElementById("round").innerHTML =
        `${game.round}/${game.max_rounds} - Enter Tricks`;
    }

    const max = game.round;

    console.log(game.dealer);
    console.log(players);
    //clear data
    data = [];
    //fill it with 0 for each player
    for (let index = 0; index < players.length; index++) {
      data[index] = 0;
    }

    //loop through players from the dealer to the end
    for (let i = game.dealer + 1; i < players.length; i++) {
      addplayertoInput(i, max);
    }

    // loop through players from the start to the dealer
    for (let i = 0; i <= game.dealer; i++) {
      addplayertoInput(i, max);
    }

    updatetotal();
  }

  //add event listener to confirm button
  function Input_confirm() {
    if (valid) {
      if (game.step == "1") {
        let bets = JSON.parse(game.bets);
        //if rounds is null then create an empty array
        if (bets === null) {
          bets = [];
        }
        //push the scores array to rounds
        bets.push(data);

        game.bets = JSON.stringify(bets);
        game.step = "2";
        localStorage.setItem("game", JSON.stringify(game));
      } else {
        let tricks = JSON.parse(game.tricks);
        if (tricks === null) {
          tricks = [];
        }
        //push the scores array to rounds
        tricks.push(data);

        game.tricks = JSON.stringify(tricks);
        localStorage.setItem("game", JSON.stringify(game));

        //get the scores from localstorage
        let score = JSON.parse(game.score);
        //calculate the scores
        let score_change = JSON.parse(game.score_change);
        let psc = [];
        let ps = [];
        const round = game.round;

        if (game.round === 1) {
          score_change = [];
          score = [];
        }
        for (let index = 0; index < players.length; index++) {
          psc[index] = scorecalc(
            JSON.parse(game.bets)[round - 1][index],
            JSON.parse(game.tricks)[round - 1][index],
          );

          if (round === 1) {
            ps[index] = psc[index];
          } else {
            ps[index] = score[round - 2][index] + parseFloat(psc[index]);
          }
        }
        score_change.push(psc);
        score.push(ps);

        game.score = JSON.stringify(score);
        game.score_change = JSON.stringify(score_change);

        localStorage.setItem("game", JSON.stringify(game));

        if (game.max_rounds != "∞" && game.round >= game.max_rounds) {
          game.step = "3";
        } else {
          //update rounds in localstorage
          game.round++;
          //shift dealer
          game.dealer = (game.dealer + 1) % players.length;
          localStorage.setItem("game", JSON.stringify(game));

          game.step = "1";
          localStorage.setItem("game", JSON.stringify(game));
        }
      }
      game.display = "1";
      localStorage.setItem("game", JSON.stringify(game));
      update();
    } else {
      if (game.step == "1") {
        document.getElementById("alert_1").showModal();
      } else {
        document.getElementById("alert_2").showModal();
      }
    }
  }

  $("#continuegame").on("click", () => {
    if (game.round >= game.max_rounds) {
      game.max_rounds = "∞";
    }

    $("#endgame").removeClass("hidden");
    $("#savequit").removeClass("hidden");
    $("#continuegame").addClass("hidden");
    $("#rules").removeClass("hidden");

    game.step = "1";
    game.display = "1";
    score_switch_view("2", game);
    localStorage.setItem("game", JSON.stringify(game));
    update();
  });

  //toggles checkbox with id rule_1 if user clicks anywhere in div with id box_1Rule
  $("#box_1Rule").on("click", (event) => {
    //check if the user clicked on the checkbox itself
    if ($(event.target).is("#rule_1")) {
      return;
    }
    $("#rule_1").trigger("click");
  });

  //if rule_1 in localstorage is true then check the checkbox
  if (game.rule_1 == true) {
    $("#rule_1").prop("checked", true);
  } else {
    $("#rule_1").prop("checked", false);
  }
  //add a listener to the checkbox with id rule_1
  $("#rule_1").on("click", () => {
    //if the checkbox is checked
    if ($("#rule_1").is(":checked")) {
      game.rule_1 = true;
      localStorage.setItem("game", JSON.stringify(game));
      //update the confirm button
    } else {
      game.rule_1 = false;
      localStorage.setItem("game", JSON.stringify(game));
    }
    updatetotal();
  });

  $("#endgame").on("click", () => {
    document.getElementById("modal_settings").close();
    document.getElementById("modal_confirmend").open = true;
  });

  $("#rendgame").on("click", () => {
    if (game.round == 1) {
      localStorage.removeItem("game");
      location.href = "/";
    } else {
      game.step = "3";
      game.display = "1";
      navblue();
      localStorage.setItem("game", JSON.stringify(game));
      update();
    }
  });

  $("#editscore").on("click", () => {
    //change navtext to exit edit mode
    $("#navtext").text("Exit Edit Mode");
    score_switch_view(2, game);
    editmode = true;

    //players
    for (let index = 0; index < players.length; index++) {
      let player = players[index];
      $(`#n_${index}`).on("click", () => {
        document.getElementById("modal_edit").showModal();
        //set edit_name to the name of the player
        let old_name = $(`#n_${index}`).text();
        let had_crown = false;
        if (old_name.includes("👑")) {
          had_crown = true;
          old_name = old_name.replace("👑", "");
        }
        old_name = old_name.trim();
        $("#edit_name").val(old_name);
        $("#edit_save").on("click", () => {
          $("#edit_save").off("click");
          //get the new name
          let new_name = $("#edit_name").val();
          if (had_crown) {
            new_name = new_name + " 👑";
          }
          //replace the old name with the new name
          players[index] = new_name;
          //update the players in localstorage
          game.players = JSON.stringify(players);
          localStorage.setItem("game", JSON.stringify(game));
          //update the name
          $(`#n_${index}`).text(new_name);
        });
      });
    }

    //score
    //bind click event to each td with id std
    $("td[id^='std']").on("click", function () {
      //TODO: crown thing

      let id = $(this).attr("id");
      let round = id.substring(3, 4);
      let player = id.substring(4, 5);
      let score = JSON.parse(game.score)[round][player];
      document.getElementById("modal_edit").showModal();
      $("#edit_name").val(score);
      $("#edit_save").on("click", () => {
        $("#edit_save").off("click");
        let new_score = $("#edit_name").val();
        let score_array = JSON.parse(game.score);
        score_array[round][player] = new_score;
        game.score = JSON.stringify(score_array);
        localStorage.setItem("game", JSON.stringify(game));
        $(`#std${round}${player}`).text(new_score);
      });
    });

    //bind click event to each td with id btd
    $("td[id^='btd']").on("click", function () {
      let id = $(this).attr("id");
      let round = id.substring(3, 4);
      let player = id.substring(4, 5);
      let bet = JSON.parse(game.bets)[round][player];
      document.getElementById("modal_edit").showModal();
      $("#edit_name").val(bet);
      $("#edit_save").on("click", () => {
        $("#edit_save").off("click");
        let new_bet = $("#edit_name").val();
        //check if new_bet is a positive number else show info modal
        if (new_bet < 0 || new_bet % 1 != 0) {
          document.getElementById("modal_attention").showModal();
          $("#info_text").text("Please enter a positive number");
          return;
        }
        let bet_array = JSON.parse(game.bets);
        bet_array[round][player] = new_bet;
        game.bets = JSON.stringify(bet_array);
        localStorage.setItem("game", JSON.stringify(game));
        $(`#btd${round}${player}`).text(new_bet);
      });
    });
    //show info modal
    document.getElementById("modal_attention").showModal();
    $("#info_text").text("Click on a name, score or bet to edit it.");
  });

  $("#editdealer").on("click", () => {
    console.log("editdealer");
    //set edit_name to the name of the player
    let old_name = players[game.dealer];
    let select_dealer = document.getElementById("select_dealer");
    select_dealer.innerHTML = "";
    for (let index = 0; index < players.length; index++) {
      const player = players[index];
      let option = document.createElement("option");
      option.value = index;
      option.text = player;
      select_dealer.add(option);
    }
    select_dealer.value = game.dealer;
    document.getElementById("modal_dealer").showModal();
  });
  $("#select_dealer_save").on("click", () => {
    game.dealer = document.getElementById("select_dealer").value;
    localStorage.setItem("game", JSON.stringify(game));
    location.reload();
  });

  update();
</script>
